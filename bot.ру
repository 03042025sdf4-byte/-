import json
import re
from datetime import date, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes
import os
import uuid

TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
DATA_FILE = "data.json"

# ----------------------- –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ -----------------------
def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
            return {"transactions": data.get("transactions", []), "total": int(data.get("total", 0))}
    except FileNotFoundError:
        return {"transactions": [], "total": 0}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

data = load_data()
today_str = str(date.today())
yesterday_str = str(date.today() - timedelta(days=1))
# –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –¥–Ω—è
data["transactions"] = [t for t in data["transactions"] if t["date"] in (today_str, yesterday_str)]

# ----------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ -----------------------
def format_money(amount: int) -> str:
    return f"{amount:,}".replace(",", ".")

def recalc_totals():
    total = 0
    expenses_today = 0
    income_today = 0
    for t in data["transactions"]:
        if t["type"] == "income":
            total += t["amount"]
            if t["date"] == today_str:
                income_today += t["amount"]
        else:
            total -= t["amount"]
            if t["date"] == today_str:
                expenses_today += t["amount"]
    data["total"] = total
    return total, expenses_today, income_today

# ----------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π -----------------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global data
    text = update.message.text.strip()
    lines = text.split("\n")
    messages = []

    for line in lines:
        line = line.strip()
        if not line:
            continue
        match = re.match(r"^([+-]?\d+)", line)
        if not match:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —á–∏—Å–ª–∞ –≤ –Ω–∞—á–∞–ª–µ
            continue
        num = int(match.group(1))
        comment = line[len(match.group(1)):].strip()
        transaction_id = str(uuid.uuid4())

        if line.startswith("+"):
            data["transactions"].append({
                "id": transaction_id,
                "date": today_str,
                "amount": num,
                "type": "income",
                "comment": comment
            })
            messages.append(f"üìà +{format_money(num)} ars [ID: {transaction_id[:8]}] {comment}")
        else:
            data["transactions"].append({
                "id": transaction_id,
                "date": today_str,
                "amount": num,
                "type": "expense",
                "comment": comment
            })
            messages.append(f"üìâ -{format_money(num)} ars [ID: {transaction_id[:8]}] {comment}")

    if messages:
        total, expenses_today, income_today = recalc_totals()
        save_data(data)
        reply = "\n".join(messages)
        reply += f"\nüìâ –†–∞—Å—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: -{format_money(expenses_today)} ars"
        reply += f"\nüìà –ü—Ä–∏—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: +{format_money(income_today)} ars"
        reply += f"\nüí∞ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {format_money(total)} ars"
        await update.message.reply_text(reply)

# ----------------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ -----------------------
async def edit_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global data
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit <id> <–Ω–æ–≤–∞—è —Å—É–º–º–∞>")
        return
    edit_id, new_amount_str = context.args
    try:
        new_amount = int(new_amount_str)
    except ValueError:
        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    for t in data["transactions"]:
        if t["id"].startswith(edit_id):
            old_amount = t["amount"]
            t["amount"] = new_amount
            save_data(data)
            total, expenses_today, income_today = recalc_totals()
            await update.message.reply_text(
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {edit_id} –∏–∑–º–µ–Ω–µ–Ω–∞: {old_amount} ‚Üí {new_amount}\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {format_money(total)} ars"
            )
            return
    await update.message.reply_text("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# ----------------------- –£–¥–∞–ª–µ–Ω–∏–µ -----------------------
async def delete_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global data
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete <id>")
        return
    del_id = context.args[0]
    for i, t in enumerate(data["transactions"]):
        if t["id"].startswith(del_id):
            removed = data["transactions"].pop(i)
            save_data(data)
            total, expenses_today, income_today = recalc_totals()
            await update.message.reply_text(
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {del_id} —É–¥–∞–ª–µ–Ω–∞: {removed['amount']} ars\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {format_money(total)} ars"
            )
            return
    await update.message.reply_text("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# ----------------------- –°–ø–∏—Å–æ–∫ -----------------------
async def list_transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global data
    if not data["transactions"]:
        await update.message.reply_text("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –¥–Ω—è.")
        return
    lines = []
    for t in data["transactions"]:
        emoji = "üìà" if t["type"] == "income" else "üìâ"
        sign = "+" if t["type"] == "income" else "-"
        lines.append(f"{emoji} {sign}{format_money(t['amount'])} ars [{t['id'][:8]}] {t.get('comment','')}")
    await update.message.reply_text("\n".join(lines))

# ----------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ -----------------------
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(CommandHandler("edit", edit_transaction))
app.add_handler(CommandHandler("delete", delete_transaction))
app.add_handler(CommandHandler("list", list_transactions))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(drop_pending_updates=True)
