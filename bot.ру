import json
import re
from datetime import date, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
import os

TOKEN = os.getenv("BOT_TOKEN")
DATA_FILE = "data.json"

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
            # –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –æ—Å—Ç–∞—Ç–æ–∫
            return {
                "transactions": data.get("transactions", []),
                "total": int(data.get("total", 0))
            }
    except FileNotFoundError:
        return {"transactions": [], "total": 0}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

data = load_data()

# –î–∞—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö –¥–Ω–µ–π
today_str = str(date.today())
yesterday_str = str(date.today() - timedelta(days=1))

# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –¥–Ω—è
data["transactions"] = [t for t in data["transactions"] if t["date"] in (today_str, yesterday_str)]

def format_money(amount: int) -> str:
    return f"{amount:,}".replace(",", ".")

def recalc_totals():
    total = 0
    expenses_today = 0
    for t in data["transactions"]:
        if t["type"] == "income":
            total += t["amount"]
        else:
            total -= t["amount"]
            if t["date"] == today_str:
                expenses_today += t["amount"]
    data["total"] = total
    return total, expenses_today

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global data
    text = update.message.text.strip()
    lines = text.split("\n")

    messages = []

    for line in lines:
        line = line.strip()
        if not line:
            continue

        match = re.match(r"^([+-]?\d+)", line)
        if not match:
            continue
        num = int(match.group(1))

        if line.startswith("+"):
            # –ü—Ä–∏—Ö–æ–¥
            data["transactions"].append({
                "date": today_str,
                "amount": num,
                "type": "income"
            })
            messages.append(f"üìà +{format_money(num)} ars (–ø—Ä–∏—Ö–æ–¥)")
        else:
            # –†–∞—Å—Ö–æ–¥
            data["transactions"].append({
                "date": today_str,
                "amount": num,
                "type": "expense"
            })
            messages.append(f"üìâ -{format_money(num)} ars (—Ä–∞—Å—Ö–æ–¥)")

    # –ü–µ—Ä–µ—Å—á—ë—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤
    total, expenses_today = recalc_totals()

    save_data(data)

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    reply = "\n".join(messages)
    reply += f"\nüìâ –†–∞—Å—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: -{format_money(expenses_today)} ars"
    reply += f"\nüí∞ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {format_money(total)} ars"
    await update.message.reply_text(reply)

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
